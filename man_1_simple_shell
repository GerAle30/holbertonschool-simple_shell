**NAME**  
simple_shell â€” simple UNIX command line interpreter

**SYNOPSIS**  
`./hsh`

**DESCRIPTION**  
The `simple_shell` is a basic UNIX command interpreter that reads commands from standard input and executes them. It offers core functionality similar to standard shells, including executing external commands by searching the directories listed in the `PATH` environment variable.

When invoked, the shell displays a prompt and waits for user input. It reads, parses, and executes commands repeatedly until the user exits the shell.

**FEATURES**

- **Interactive Mode**  
  When connected to a terminal, the shell operates in interactive mode and displays a prompt (`$`) before each command.

- **Non-Interactive Mode**  
  When receiving input from a pipe or file, the shell processes commands without showing a prompt.

- **Command Execution**  
  Commands are executed by searching for the executable in the directories specified in `PATH`. If the command contains a slash (`/`), the shell attempts to execute it directly.

- **Built-in Commands**  
  The shell supports the following built-ins:

  - `exit`  
    Exits the shell, returning the status of the last executed command or a specified status.

  - `env`  
    Prints the current environment variables.

**EXIT STATUS**  
The exit status of the shell is the status of the last command executed. If the command is not found, the exit status is `127`. If the command is found but not executable, the status depends on the system error.

**ENVIRONMENT VARIABLES**  
- `PATH`  
  Specifies the colon-separated list of directories to search for commands.

**EXAMPLES**

- Run a command:
  
  ```
  ($) ls -l
  ```

- Run a built-in command:
  
  ```
  ($) env
  ```

- Exit the shell:
  
  ```
  ($) exit
  ```

**BUGS**  
The current implementation has several limitations:

- No support for command line arguments or options beyond simple commands.
- No support for pipes, redirections, or background processes.
- No command aliasing or shell variables.
- No command history functionality.

**SEE ALSO**  
`sh(1)`, `bash(1)`, `dash(1)`
